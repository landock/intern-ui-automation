= Custom Command Methods
:source-highlighter: coderay
:toc: right
:icons: font

== Overview
Custom commands allow additional or common functionality to be encapsulated into methods that can be accessed from Leadfoot's 'command chain'. Tests are constructed by 'chaining' leadfoot methods onto the return statements that return Promise objects. Sometimes, it is useful to use conditional logic or save variables somewhere along the command chain. This can be accomplished using leadfoot's `.then` method.

.Example
[source,javascript]
----
...
'get ID of new email when it arrives' : function(){
    return command
    .then(pollUntil( function(){
        var contains_less = 
        $('li.row-fluid:nth-child(1) > a:nth-child(1) > div:nth-child(3)').text().indexOf('less');
        return contains_less != -1 ? true : null;
    },[],60000,1000))
    .execute(function(){
        return $('#mailcontainer > li:nth-child(1) > a').attr('onclick')
    })
    .then(function(attr){
        var msg_id = attr.match(/showmail\('(.*)'\)/)[1];
        return command
        .get('https://mailinator.com/rendermail.jsp?msgid='+msg_id)
    })
},
...
----

Several tasks encountered in automated testing are repetitive or used in several locations (i.e. login/logout). These are good candidates for conversion to a custom command. Custom commands are available as methods on Leadfoot's command object and can be used in a promise return chain. `loginFromHeader` in `BaseCommand.sj` is an example of this. Below is an example of the code that would have to be included in a test case everytime logging in is required:

[source,javascript]
----
...
'log in a test customer in': function(){
    return command
    .findAndClick('a[data-flyout-id="flyout-sign-in"]')
    .enterInput('#email-address-modal', customer.email)
    .enterInput('#loginPassword', customer.password)
    .findAndClick('#dwfrm_login_login');
},
...
----

Below is code that accomplishes the same thing, but by using a custom command:
[source,javascript]
----
...
'log in a test customer in': function(){
    return command
    .loginFromHeader(customer); <1>
}
...
----
<1> Custom commands can accept arugments. This one takes a test customer object to log in (typcially retrieved from `generator.js`). A customer object contains the email and username used by the custom command to complete the log in process.


== Adding Additional Custom Commands
Custom commands can be appended to any of the existing .js files in `tests/functional/customCommands`. Alternatively, a new .js file can be created to contain additional custom commands. If a new file containing custom commands is added to the project, it needs to be made available on the Leadfoot command object before it can be accessed in test cases. This is done by adding the custom command file to `AllCommands.js`. For example, to add a new custom command .js file called `SomeNewCommand.js`:

.AllCommands.js sample
[source,javascript]
----
define([
  'intern/dojo/node!lodash',
  'intern/dojo/node!leadfoot/Command',
  './BaseCommand',
  './AddressCommand',
  './HomeCommand',
  './ProductCommand',
  './DrCommand',
  './SomeNewCommand', <1>
], 

function (_, _Command, Base, Address, Home, Product, Dr, Payment, SomeNew) { <2>
    var proto = AllCommands.prototype = Object.create(_Command.prototype, {});
    _.assign(proto, _Command.prototype,
                    Base.prototype,
                    Address.prototype,
                    Home.prototype,
                    Product.prototype,
                    Dr.prototype,
                    Payment.prototype,
                    SomeNew.prototype); <3>

    function AllCommands() {
        _Command.apply(this, arguments);
    }

    proto.constructor = AllCommands;

    return AllCommands;
});
----
<1> Add the new file path to the define block so it is included in `AllCommands`
<2> Make sure that the new file has an argument to represent it here: `SomeNew`
<3> Add the new file's prototype to the `_.assign` arguments: `SomeNew.prototype`

NOTE: All existing test cases include `AllCommands.js`, so it is not necessary to include the custom command files listed in `AllCommands.js` separately in test cases as they are already made available via `AllCommands`. However, if you decide to use custom commands not included in `AllCommands.js` in a test, then you will need to include that custom command file separately in the `define` block of the relevant test.

== Custom Command Reference
The following is a list of existing custom commands found in `tests/functional/customCommands` by .js file.

=== Base Commands *(BaseCommand.js)*

setAllTimeoutLengths(timeoutLength)::
====
This sets various timeouts. It is equivalent to: 

[source,javascript]
.setTimeout('script', defaultTimeoutLength)
.setTimeout('page load', defaultTimeoutLength)
.setFindTimeout(findTimeoutLength);

NOTE: This method is an internal helper method for configureNewSession

[horizontal]
.Parameters
timeoutLength:: The amount of time the various timeouts should be set to (ms).
====



configureNewSession(timeout)::
====
This is used in tests to consolidate common setup parameters. It is equivalent to: 

[source,javascript]
    .setAllTimeoutLengths(timeout)
    .clearCookies();

Use it in the setup function of tests. For example:

[source,javascript]
    ... 
    return {
        name: 'non-logged in customer can add a coupon code',
        setup: function() {
            command = new Command(this.remote);
            couponCode = generator.getPromoCode('Anybody',0);
            return command
            .configureNewSession(60000)
            .get(config.URL + '/lens/biofinity');
        },
        ...
    }
    ...

[horizontal]
.Parameters
timeout:: The amount of time the various timeouts should be set to (ms).
====



configureNewMobileSession(timeout)::
====
This is used in tests to consolidate common setup parameters for mobile tests. It is equivalent to: 

[source,javascript]
    .configureNewSession(timeout)
    .mobileClearAppAdPage()
    .removeDemandWareWidget();


Use it in the setup function of mobile tests. For example:

[source,javascript]
    return {
        name: 'mobile address editing test',
        setup : function() {
            customer = generator.getRandomCustomer();
            anotherRandomCustomer = generator.getRandomCustomer();
            command = new Command(this.remote);
            return command
            .configureNewMobileSession(60000)
            .get(config.URL + '/account');
        },
        ...
    }
    ...


[horizontal]
.Parameters
timeout:: The amount of time the various timeouts should be set to (ms).
====



loginFromHeader(customer)::
====
Consolidates commands to log a customer in using the drop-down menu in the header of the 1800Contacts website.

[horizontal]
.Parameters
customer:: A customer object representing the custoer to be logged in (typically from `generator.js`).
====



logoutFromHeader()::
====
Consolidates commands to log a customer out using the drop-down menu in the header.

CAUTION: This method will fail if called when no customer is logged in.
====



mobileLogin(customer)::
====
Consolidates commands to log a customer in on mobile platforms.

[horizontal]
.Parameters
customer:: A customer object representing the custoer to be logged in (typically from `generator.js`).
====



mobileLogout()::
====
Consolidates commands to log a customer out on mobile platforms.

CAUTION: This method will fail if called when no customer is logged in.
====



signInFromCart(customer)::
====
Consolidates commands to sign a customer in when prompted during the checkout process.

NOTE: This method has to be called when the test is on the page prompting for login during the checkout process or else it will fail.

[horizontal]
.Parameters
customer:: A customer object representing the custoer to be logged in (typically from `generator.js`).
====



assertLoggedIn()::
====
Asserts that a user is logged in. Fails if they are not logged in.
====



assertLoggedOut()::
====
Asserts that a user is not logged in (logged out). Fails if they are still logged in.
====



enterInput(id, text)::
====
Enters text into a form text input. This method encapsulates extra functionality that leadfoot's `.type()` doesn't have which handles the clearing of default placeholder text on the 1800Contacts site. 

CAUTION: This only works for pages that have JQuery loaded

[horizontal]
.Parameters
id:: The CSS selector of the form input element to receieve the text 
text:: The text to enter into the form input element specified by `id`.
====



enterInputWithoutJQuery(id, text)::
====
Enters text into a form text input. This is intended for use with external pages (i.e. PayPal, FaceBook sign-ins) which do not use JQuery. For 1800Contacts page inputs, use `enterInput` instead.

[horizontal]
.Parameters
id:: The CSS selector of the form input element to receieve the text 
text:: The text to enter into the form input element specified by `id`.
====



setDesktopPowerDropdown(id, value)::
====
Sets the eye power on contacts product pages. Use this instead of `setDropdown` for the eye power dropdown since it contains additional logic to handle the custom dual-column dropdown for eye power used on the desktop 1800Contacts site.

NOTE: To set the power dropdown on mobile pages, use `setDropdown`

.Example
[source,javascript]
----
.setDesktopPowerDropdown('#dwfrm_lensproduct_rightEye_contactsPower','+1.25')
----

[horizontal]
.Parameters
id:: The id of the HTML `select` element that corresponds to the power dropdown
value:: The value which the dropdown should be set to.
====



setDropdown(id, value)::
====
A convenience method to set dropdown (select) elements. Use this for any dropdown on mobile pages and any dropdown on desktop pages (except for the desktop eye power select dropdown).

NOTE: To set the eye power dropdown on the desktop site, use `setDesktopPowerDropdown`

.Example
[source,javascript]
----
.setDropdown('#CreditCardChoose','newCreditCard')
----

[horizontal]
.Parameters
id:: The id of the HTML `select` element that corresponds to the dropdown
value:: The value which the dropdown should be set to. This corresponds to the `value` attribute of the HTML `<option>` tag.
====



findAndClick(id)::
====
A convenience method that combines leadfoot's `.findAllByCssSelector` method and leadfoot's `.click` method. 

[horizontal]
.Parameters
id:: The id of the HTML element to be clicked on.
====



clearForm(formId)::
====
A convenience method that clears all HTML `<input>` elements of a form with the type attributes of `type=text` and `type=tel`.

[horizontal]
.Parameters
formId:: The id of the HTML `<form>` element containing `<input>` elements to be cleared.
====



assertElementText(selector, text)::
====
A convenience method that finds an element, then asserts that its text includes the text given in the `text` argument.

NOTE: This method uses the `assert.include` method of chai JS.

[horizontal]
.Parameters
selector:: The id of the element which contains the text to be asserted.
text:: A sample of text that the element given by `selector` should contain.
====



removeDemandWareWidget()::
====
This method removes the DemandWare widget present on pages in the staging environment. This is particularly useful in the mobile tests where the widget interferes with other common page elements.
====



createNewAccount(customer)::
====
A convenience method that consolidates commands to create a new account from the `/account` page.

CAUTION: This command has to be run from the `/account` page. Use leadfoot's `get` command to direct the browser to the `/account` page if not already on it before calling this command.

.Example
[source,javascript]
----
...
return {
    name: 'new logged-in customer can change doctor during checkout',
    setup: function() {
        command = new Command(this.remote);
        customer = generator.getRandomCustomer();
        return command
        .configureNewSession(60000)
        .get(config.URL + '/account'); <1>
    },

    'create new account': function(){
        return command
        .createNewAccount(customer);
    },
    ...
}
----
<1> Note that this test starts on `/account` before calling `createNewAccount`

[horizontal]
.Parameters
customer:: A customer object (typcially retrieved from `generator.js`) representing the new customer to be created.
====



mobileClearAppAdPage()::
====
A convenience method that clears the survey pop-up box on the mobile site by clicking 'No Thanks' if it exists.
====



clickOnStylizedFormElement(label_id)::
====
A method that encapsulates functionality to handle stylized radio buttons and checkboxes used throughout the site. These stylized controls hide the HTML element and use JavaScript and images to mimic their functionality. This method provides an easy way to click on these stylized form elements which works on all browsers.

[horizontal]
.Parameters
label_id:: The CSS ID of the HTML `<label>` element that corresponds to the hidden `<input>` radio button or checkbox which should receive the click.
====



assertOrderSuccess()::
====
Asserts that an order has been placed successfully by asserting the presence of the HTML element that contains the confirmation message.
====



== Address Commands *(AddressCommand.js)*

fillAddressForm(customer)::
====
Fills out all fields in the address form including:

* address 1
* address 2
* city
* zip
* phone
* firstname
* lastname
* state

This method can be used on its own, but is more typically used as a 'helper' method for the other methods in `AddressCommand.js` such as `fillCartAddressForm`, `fillEditAddressForm`, and `fillAddNewAddressForm`.

NOTE: If an address form is not present on the page, this method will fail

[horizontal]
.Parameters
customer:: A customer object representing customer data to be used when populating the form fields (typically from `generator.js`).
====



fillCartAddressForm(customer)::
====
Fills out an address form by calling `fillAddressForm` and in addition, fills out the following additional fields present on the adress form when accessed from the cart:

* email
* password
* passwordconfirm

NOTE: If an address form is not present on the page, this method will fail

[horizontal]
.Parameters
customer:: A customer object representing customer data to be used when populating the form fields (typically from `generator.js`).
====



fillEditAddressForm(customer)::
====
This method is used when editing an address in the Account section of the site. It Ensures the address form is cleared and then fills out an address form by calling `fillAddressForm`. This method also clicks the edit address submit button when finished and ensures that the address form dialog closes when finished. 

NOTE: If an address form is not present on the page, this method will fail

[horizontal]
.Parameters
customer:: A customer object representing customer data to be used when populating the form fields (typically from `generator.js`).
====



fillAddNewAddressForm(customer)::
====
This method is used when adding a new address in the Account section of the site. It Ensures the address form is cleared and then fills out an address form by calling `fillAddressForm`. This method also clicks the new address submit button when finished and ensures that the address form dialog closes when finished. 

NOTE: If an address form is not present on the page, this method will fail

[horizontal]
.Parameters
customer:: A customer object representing customer data to be used when populating the form fields (typically from `generator.js`).
====



== Doctor Commands *(DrCommand.js)*

fillDrInfo(customer)::
====
Fills out the Dr. info during the ordering process. It enters the Doctor name and state specified in the customer object and then clicks on the search button. Once the results are returned, the first result is selected. This results in moving on to the next page in the order process once this method has finished running.

[horizontal]
.Parameters
customer:: A customer object representing customer data to be used when populating the Dr. search form fields (typically from `generator.js`).
====



mobileFillDrInfo(customer)::
====
Fills out the Dr. info during the ordering process on the mobile site. It enters the Doctor name and state specified in the customer object and then clicks on the search button. Once the results are returned, the first result is selected. This results in moving on to the next page in the order process once this method has finished running.

[horizontal]
.Parameters
customer:: A customer object representing customer data to be used when populating the Dr. search form fields (typically from `generator.js`).
====



== Home Commands *(HomeCommand.js)*

loginFromHome(customer)::
====
Logs into the site using the button on the Home page (not the sign-in link in the header).

NOTE: To log in to the site from any page using the sign-in link in the header, use the `loginFromHeader(customer)` custom command (defined in `BaseCommand.js`.

[horizontal]
.Parameters
customer:: A customer object representing the customer to log in (typically from `generator.js`).
====



== Payment Commands *(PaymentCommand.js)*

testCardPayment(customer, creditCardNo)::
====
This method encapsulates functionality used in multiple payment method tests. It must be run from the `/account` page since it creates a new account. This method performs the following:

* creates a new account
* assert that login with new account is successful
* places contact lenses in the cart
* fills out a new address for the new customer
* fills out Dr. info
* clicks on the CreditCard method of payment
* chooses a new CreditCard as the payment method
* enters the credit card number passed in from the `creditCardNo` argument to this method
* enters the credit card year
* enters the customer name
* submits the order

CAUTION: This command has to be run from the `/account` page. Use leadfoot's `get` command to direct the browser to the `/account` page if not already on it before calling this command.

[horizontal]
.Parameters
customer:: A customer object representing the new customer to create and use to perform these actions (typically from `generator.js`).
creditCardNo:: The test credit card number to use to place the test order (typcially retrieved from `generator.js`).
====



mobileTestCardPayment(customer, creditCardNo)::
====
This method encapsulates functionality used in multiple payment method tests. It must be run from the `/lens/acuvue-oasys-24` page.

* places contact lenses in the cart
* fills out Dr. info
* clicks on the CreditCard method of payment
* chooses a new CreditCard as the payment method
* enters the credit card number passed in from the `creditCardNo` argument to this method
* enters the credit card year
* enters the customer name
* submits the order

CAUTION: This command has to be run from the `/lens/acuvue-oasys-24` page. Use leadfoot's `get` command to direct the browser to the `/lens/acuvue-oasys-24` page if not already on it before calling this command.

[horizontal]
.Parameters
customer:: A customer object representing the new customer to create and use to perform these actions (typically from `generator.js`).
creditCardNo:: The test credit card number to use to place the test order (typcially retrieved from `generator.js`).
====



== Product Commands *(ProductCommand.js)*

fillInfo()::
====
This method encapsulates functionality used to place the Acuvue Oasys24 lenses into the cart. It must be run from the `/lens/acuvue-oasys-24` page since it manipulates form elements and places this item in the cart. It selects eye power, base curve, enters a test name, and clicks the continue button to proceed with the order process.

CAUTION: This command has to be run from the `/lens/acuvue-oasys-24` page. Use leadfoot's `get` command to direct the browser to the `/lens/acuvue-oasys-24` page if not already on it before calling this command.

.Example
[source,javascript]
----
...
return {
    name: 'non-logged in customer can add contact lenses to cart',
    setup: function() {
        command = new Command(this.remote);
        return command
        .configureNewSession(60000)
        .get(config.URL + '/lens/acuvue-oasys-24'); <1>
    },

    'fill out eye info': function(){
        return command.fillInfo();
    },
    ...
}
----
<1> Note that this test starts on `/lens/acuvue-oasys-24` before calling `fillInfo`.
====



mobileFillInfo()::
====
This method encapsulates functionality used to place the Acuvue Oasys24 lenses into the cart on the mobile site. It must be run from the `/lens/acuvue-oasys-24` page since it manipulates form elements and places this item in the cart. It selects eye power, base curve, enters a test name, and clicks the continue button to proceed with the order process.

CAUTION: This command has to be run from the `/lens/acuvue-oasys-24` page. Use leadfoot's `get` command to direct the browser to the `/lens/acuvue-oasys-24` page if not already on it before calling this command.

.Example
[source,javascript]
----
...
return {
    name: 'mobile non-logged in customer can add contact lenses to cart',
    setup: function() {
        command = new Command(this.remote);
        return command
        .configureNewSession(60000)
        .get(config.URL + '/lens/acuvue-oasys-24'); <1>
    },

    'fill out eye info': function(){
        return command.mobileFillInfo();
    },
    ...
}
----
<1> Note that this test starts on `/lens/acuvue-oasys-24` before calling `fillInfo`.
====



fillBiofinityInfo()::
====
This method encapsulates functionality used to place the Biofinity lenses into the card. It must be run from the `/lens/biofinity` page since it manipulates form elements and places this item in the cart. It selects eye power, enters a test name, and clicks the continue button to proceed with the order process.

CAUTION: This command has to be run from the `/lens/biofinity` page. Use leadfoot's `get` command to direct the browser to the `/lens/biofinity` page if not already on it before calling this command.

.Example
[source,javascript]
----
...
return {
    name: 'non-logged in customer can add a coupon code',
    setup: function() {
        command = new Command(this.remote);
        return command
        .configureNewSession(60000)
        .get(config.URL + '/lens/biofinity'); <1>
    },

    'fill out lens info': function(){
        return command.fillBiofinityInfo();
    },
    ...
}
----
<1> Note that this test starts on `/lens/biofinity` before calling `fillInfo`.
====



mobilefillBiofinityInfo()::
====
This method encapsulates functionality used to place the Biofinity lenses into the card on the mobile site. It must be run from the `/lens/biofinity` page since it manipulates form elements and places this item in the cart. It selects eye power, enters a test name, and clicks the continue button to proceed with the order process.

CAUTION: This command has to be run from the `/lens/biofinity` page. Use leadfoot's `get` command to direct the browser to the `/lens/biofinity` page if not already on it before calling this command.

.Example
[source,javascript]
----
...
return {
    name: 'mobile non logged-in customer can add and remove coupon',
    setup: function() {
        command = new Command(this.remote);
        return command
        .configureNewSession(60000)
        .get(config.URL + '/lens/biofinity'); <1>
    },

    'fill out lens info': function(){
        return command.fillBiofinityInfo()
        .findAndClick('#enterManuallyButton')
        .mobileFillBiofinityInfo();
    },
    ...
}
----
<1> Note that this test starts on `/lens/biofinity` before calling `fillInfo`.
====


